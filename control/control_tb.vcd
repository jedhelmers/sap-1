$date
	Sat Mar 12 18:19:44 2022
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module control_tb $end
$var wire 4 ! step_out [3:0] $end
$var wire 1 " reg_out $end
$var wire 4 # reg_flags_in [3:0] $end
$var wire 1 $ reg_b_out $end
$var wire 1 % reg_b_in $end
$var wire 1 & reg_a_out $end
$var wire 1 ' reg_a_in $end
$var wire 1 ( ram_out $end
$var wire 1 ) ram_in $end
$var wire 1 * pc_out $end
$var wire 1 + pc_jmp $end
$var wire 1 , pc_inc $end
$var wire 1 - mar_in $end
$var wire 1 . instr_out $end
$var wire 1 / instr_in $end
$var wire 1 0 halt $end
$var wire 1 1 alu_sub $end
$var wire 1 2 alu_out $end
$var reg 1 3 clk $end
$var reg 1 4 debug $end
$var reg 4 5 flags [3:0] $end
$var reg 4 6 opcode [3:0] $end
$var reg 1 7 rst $end
$var integer 32 8 _cnt [31:0] $end
$scope module c $end
$var wire 1 3 clk $end
$var wire 1 4 debug $end
$var wire 4 9 flags [3:0] $end
$var wire 4 : opcode [3:0] $end
$var wire 1 7 rst $end
$var wire 4 ; step_out [3:0] $end
$var wire 1 " reg_out $end
$var wire 4 < reg_flags_in [3:0] $end
$var wire 1 $ reg_b_out $end
$var wire 1 % reg_b_in $end
$var wire 1 & reg_a_out $end
$var wire 1 ' reg_a_in $end
$var wire 1 ( ram_out $end
$var wire 1 ) ram_in $end
$var wire 1 * pc_out $end
$var wire 1 + pc_jmp $end
$var wire 1 , pc_inc $end
$var wire 1 - mar_in $end
$var wire 1 . instr_out $end
$var wire 1 / instr_in $end
$var wire 1 0 halt $end
$var wire 1 1 alu_sub $end
$var wire 1 2 alu_out $end
$var reg 18 = control_bits [17:0] $end
$var reg 4 > step [3:0] $end
$var integer 32 ? ADD [31:0] $end
$var integer 32 @ CARRY [31:0] $end
$var integer 32 A HLT [31:0] $end
$var integer 32 B JC [31:0] $end
$var integer 32 C JMP [31:0] $end
$var integer 32 D JZ [31:0] $end
$var integer 32 E LDA [31:0] $end
$var integer 32 F LDB [31:0] $end
$var integer 32 G LDI [31:0] $end
$var integer 32 H NOP [31:0] $end
$var integer 32 I OUT [31:0] $end
$var integer 32 J PARITY [31:0] $end
$var integer 32 K SIGN [31:0] $end
$var integer 32 L STA [31:0] $end
$var integer 32 M SUB [31:0] $end
$var integer 32 N ZERO [31:0] $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 O i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 O
b1 N
b100 M
b101 L
b10 K
b11 J
b1010 I
b0 H
b110 G
b10 F
b1 E
b1001 D
b111 C
b1000 B
b1011 A
b0 @
b11 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b11 9
b0 8
07
b0 6
b11 5
14
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
b0 #
0"
b0 !
$end
#200
1-
1*
b1 !
b1 ;
b1 >
b10000100 =
13
#400
03
#600
1/
0-
1(
1,
0*
b10 !
b10 ;
b10 >
b1000101000 =
b1 8
13
#800
03
#1000
0/
0(
0,
b0 !
b0 ;
b0 >
b0 =
13
#1200
03
#1400
1-
1*
b1 !
b1 ;
b1 >
b10000100 =
13
#1600
03
#1800
1/
0-
1(
1,
0*
b10 !
b10 ;
b10 >
b1000101000 =
b10 8
13
#2000
b10 6
b10 :
03
b1 O
#2200
0/
1.
1-
0(
0,
b11 !
b11 ;
b11 >
b110000000 =
13
#2400
03
#2600
1%
0.
0-
1(
b0 !
b0 ;
b0 >
b10000000100000 =
13
#2800
03
#3000
0%
1-
0(
1*
b1 !
b1 ;
b1 >
b10000100 =
13
#3200
03
#3400
1/
0-
1(
1,
0*
b10 !
b10 ;
b10 >
b1000101000 =
b11 8
13
#3600
03
#3800
0/
1.
1-
0(
0,
b11 !
b11 ;
b11 >
b110000000 =
13
#4000
b11 6
b11 :
03
b10 O
#4200
0.
0-
b100 !
b100 ;
b100 >
b0 =
13
#4400
03
#4600
1'
12
b1 #
b1 <
b0 !
b0 ;
b0 >
b1000100000000001 =
13
#4800
03
#5000
0'
02
1-
1*
b0 #
b0 <
b1 !
b1 ;
b1 >
b10000100 =
13
#5200
03
#5400
1/
0-
1(
1,
0*
b10 !
b10 ;
b10 >
b1000101000 =
b100 8
13
#5600
03
#5800
0/
1.
1-
0(
0,
b11 !
b11 ;
b11 >
b110000000 =
13
#6000
b100 6
b100 :
03
b11 O
#6200
1%
0.
0-
1(
b100 !
b100 ;
b100 >
b10000000100000 =
13
#6400
03
#6600
1'
0%
12
11
0(
b1 #
b1 <
b0 !
b0 ;
b0 >
b1000110000000001 =
13
#6800
03
#7000
0'
02
01
1-
1*
b0 #
b0 <
b1 !
b1 ;
b1 >
b10000100 =
13
#7200
03
#7400
1/
0-
1(
1,
0*
b10 !
b10 ;
b10 >
b1000101000 =
b101 8
13
#7600
03
#7800
0/
1.
1-
0(
0,
b11 !
b11 ;
b11 >
b110000000 =
13
#8000
b101 6
b101 :
03
b100 O
#8200
0.
0-
b0 !
b0 ;
b0 >
b0 =
13
#8400
03
#8600
1-
1*
b1 !
b1 ;
b1 >
b10000100 =
13
#8800
03
#9000
1/
0-
1(
1,
0*
b10 !
b10 ;
b10 >
b1000101000 =
b110 8
13
#9200
03
#9400
0/
0(
0,
b11 !
b11 ;
b11 >
b0 =
13
#9600
03
#9800
b0 !
b0 ;
b0 >
13
#10000
b110 6
b110 :
03
b101 O
#10200
1-
1*
b1 !
b1 ;
b1 >
b10000100 =
13
#10400
03
#10600
1/
0-
1(
1,
0*
b10 !
b10 ;
b10 >
b1000101000 =
b111 8
13
#10800
03
#11000
0/
0(
0,
b0 !
b0 ;
b0 >
b0 =
13
#11200
03
#11400
1-
1*
b1 !
b1 ;
b1 >
b10000100 =
13
#11600
03
#11800
1/
0-
1(
1,
0*
b10 !
b10 ;
b10 >
b1000101000 =
b1000 8
13
#12000
b1000 6
b1000 :
03
b110 O
#12200
0/
0(
0,
b0 !
b0 ;
b0 >
b0 =
13
#12400
03
#12600
1-
1*
b1 !
b1 ;
b1 >
b10000100 =
13
#12800
03
#13000
1/
0-
1(
1,
0*
b10 !
b10 ;
b10 >
b1000101000 =
b1001 8
13
#13200
03
#13400
0/
0(
0,
b0 !
b0 ;
b0 >
b0 =
13
#13600
03
#13800
1-
1*
b1 !
b1 ;
b1 >
b10000100 =
13
#14000
b1001 6
b1001 :
03
b111 O
#14200
1/
0-
1(
1,
0*
b10 !
b10 ;
b10 >
b1000101000 =
b1010 8
13
#14400
03
#14600
0/
1.
0(
0,
1+
b0 !
b0 ;
b0 >
b100000010 =
13
#14800
03
#15000
0.
1-
1*
0+
b1 !
b1 ;
b1 >
b10000100 =
13
#15200
03
#15400
1/
0-
1(
1,
0*
b10 !
b10 ;
b10 >
b1000101000 =
b1011 8
13
#15600
03
#15800
0/
1.
0(
0,
1+
b0 !
b0 ;
b0 >
b100000010 =
13
#16000
b1011 6
b1011 :
03
b1000 O
#16200
0.
1-
1*
0+
b1 !
b1 ;
b1 >
b10000100 =
13
#16400
03
#16600
1/
0-
1(
1,
0*
b10 !
b10 ;
b10 >
b1000101000 =
b1100 8
13
#16800
03
#17000
10
0/
0(
0,
b0 !
b0 ;
b0 >
b10000000000000000 =
13
#17200
03
#17400
13
#17600
03
#17800
13
#18000
bx 6
bx :
03
b1001 O
#18200
13
#18400
03
#18600
13
#18800
03
#19000
13
#19200
03
#19400
13
#19600
03
#19800
13
#20000
03
b1010 O
#20200
13
#20400
03
#20600
13
#20800
03
#21000
13
#21200
03
#21400
13
#21600
03
#21800
13
#22000
03
b1011 O
#22200
13
#22400
03
#22600
13
#22800
03
#23000
13
#23200
03
#23400
13
#23600
03
#23800
13
#24000
03
b1100 O
