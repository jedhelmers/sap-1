$date
	Mon Mar 14 22:49:09 2022
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module cpu_tb $end
$var wire 8 ! bus [7:0] $end
$var wire 1 " instr_in $end
$var reg 8 # _bus [7:0] $end
$var reg 1 $ address_send $end
$var reg 1 % clk $end
$var reg 1 & debug $end
$var reg 4 ' flags [3:0] $end
$var reg 1 ( instr_load $end
$var reg 4 ) opcode [3:0] $end
$var reg 4 * pr_address [3:0] $end
$var reg 8 + pr_data [7:0] $end
$var reg 1 , pr_mode $end
$var reg 1 - rst $end
$var integer 32 . _cnt [31:0] $end
$scope module cpu_ $end
$var wire 1 $ address_send $end
$var wire 8 / bus [7:0] $end
$var wire 8 0 bus_out [7:0] $end
$var wire 1 % clk $end
$var wire 1 & debug $end
$var wire 4 1 flags [3:0] $end
$var wire 1 2 instr_in $end
$var wire 1 ( instr_load $end
$var wire 1 3 instr_out $end
$var wire 4 4 pr_address [3:0] $end
$var wire 8 5 pr_data [7:0] $end
$var wire 1 , pr_mode $end
$var wire 1 - rst $end
$var wire 8 6 unbuffered_out [7:0] $end
$var wire 4 7 step_out [3:0] $end
$var wire 1 8 reg_out_in $end
$var wire 4 9 reg_flags_in [3:0] $end
$var wire 1 : reg_b_out $end
$var wire 1 ; reg_b_in $end
$var wire 1 < reg_a_out $end
$var wire 1 = reg_a_in $end
$var wire 1 > ram_out $end
$var wire 1 ? ram_in $end
$var wire 1 @ pc_out $end
$var wire 1 A pc_jmp $end
$var wire 1 B pc_inc $end
$var wire 4 C opcode [3:0] $end
$var wire 1 D mar_in $end
$var wire 4 E mar_address [3:0] $end
$var wire 1 F halt $end
$var wire 1 G alu_sub $end
$var wire 1 H alu_out $end
$scope module c $end
$var wire 1 % clk $end
$var wire 1 & debug $end
$var wire 4 I flags [3:0] $end
$var wire 1 2 instr_in $end
$var wire 1 3 instr_out $end
$var wire 1 - rst $end
$var wire 4 J step_out [3:0] $end
$var wire 1 8 reg_out_in $end
$var wire 4 K reg_flags_in [3:0] $end
$var wire 1 : reg_b_out $end
$var wire 1 ; reg_b_in $end
$var wire 1 < reg_a_out $end
$var wire 1 = reg_a_in $end
$var wire 1 > ram_out $end
$var wire 1 ? ram_in $end
$var wire 1 @ pc_out $end
$var wire 1 A pc_jmp $end
$var wire 1 B pc_inc $end
$var wire 4 L opcode [3:0] $end
$var wire 1 D mar_in $end
$var wire 1 F halt $end
$var wire 1 G alu_sub $end
$var wire 1 H alu_out $end
$var reg 18 M control_bits [17:0] $end
$var reg 4 N step [3:0] $end
$var integer 32 O ADD [31:0] $end
$var integer 32 P CARRY [31:0] $end
$var integer 32 Q HLT [31:0] $end
$var integer 32 R JC [31:0] $end
$var integer 32 S JMP [31:0] $end
$var integer 32 T JZ [31:0] $end
$var integer 32 U LDA [31:0] $end
$var integer 32 V LDB [31:0] $end
$var integer 32 W LDI [31:0] $end
$var integer 32 X NOP [31:0] $end
$var integer 32 Y OUT [31:0] $end
$var integer 32 Z PARITY [31:0] $end
$var integer 32 [ SIGN [31:0] $end
$var integer 32 \ STA [31:0] $end
$var integer 32 ] SUB [31:0] $end
$var integer 32 ^ ZERO [31:0] $end
$upscope $end
$scope module ir $end
$var wire 8 _ bus_in [7:0] $end
$var wire 1 & debug $end
$var wire 1 2 instr_load_in $end
$var wire 1 3 instr_send_in $end
$var wire 4 ` opcode [3:0] $end
$var wire 1 - rst $end
$var wire 4 a address_out [3:0] $end
$var reg 4 b high [3:0] $end
$var reg 4 c low [3:0] $end
$upscope $end
$scope module mar_ $end
$var wire 4 d address_in [3:0] $end
$var wire 4 e address_out [3:0] $end
$var wire 1 & debug $end
$var wire 1 D enable_in $end
$var wire 1 - rst $end
$var reg 4 f _address [3:0] $end
$upscope $end
$scope module pc $end
$var wire 8 g cnt [7:0] $end
$var wire 1 & debug $end
$var wire 1 B inc $end
$var wire 1 @ out_en $end
$var wire 1 - rst $end
$var reg 4 h _cnt [3:0] $end
$var reg 8 i _cnt_buffer [7:0] $end
$upscope $end
$scope module r $end
$var wire 4 j address [3:0] $end
$var wire 8 k bus [7:0] $end
$var wire 1 & debug $end
$var wire 8 l prg_data [7:0] $end
$var wire 1 , prg_mode $end
$var wire 1 > re_en $end
$var wire 1 ? wr_en $end
$scope begin $ivl_for_loop0 $end
$var integer 32 m i [31:0] $end
$upscope $end
$upscope $end
$scope module reg_a $end
$var wire 8 n bus [7:0] $end
$var wire 8 o bus_out [7:0] $end
$var wire 1 = data_load $end
$var wire 1 < data_send $end
$var wire 1 & debug $end
$var wire 1 - rst $end
$var wire 8 p unbuffered_out [7:0] $end
$var reg 8 q data [7:0] $end
$upscope $end
$scope module reg_b $end
$var wire 8 r bus [7:0] $end
$var wire 8 s bus_out [7:0] $end
$var wire 1 ; data_load $end
$var wire 1 : data_send $end
$var wire 1 & debug $end
$var wire 1 - rst $end
$var wire 8 t unbuffered_out [7:0] $end
$var reg 8 u data [7:0] $end
$upscope $end
$scope module reg_out $end
$var wire 8 v bus [7:0] $end
$var wire 8 w bus_out [7:0] $end
$var wire 1 8 data_load $end
$var wire 1 : data_send $end
$var wire 1 & debug $end
$var wire 1 - rst $end
$var wire 8 x unbuffered_out [7:0] $end
$var reg 8 y data [7:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 z i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 z
bx y
bx x
bz w
bz v
bx u
bx t
bz s
bz r
bx q
bx p
bz o
bz n
b10000 m
bx l
bz k
b0 j
bz i
b0 h
bz g
b0 f
b0 e
bz d
bz c
bz b
bz a
bz `
bz _
b1 ^
b100 ]
b101 \
b10 [
b11 Z
b1010 Y
b0 X
b110 W
b10 V
b1 U
b1001 T
b111 S
b1000 R
b1011 Q
b0 P
b11 O
b0 N
b0 M
bz L
b0 K
b0 J
bz I
0H
0G
0F
b0 E
0D
bz C
0B
0A
0@
0?
0>
0=
0<
0;
0:
b0 9
08
b0 7
bx 6
bx 5
bx 4
03
x2
bz 1
bz 0
bz /
b0 .
0-
x,
bx +
bx *
b0 )
1(
b11 '
1&
0%
0$
b0 #
z"
bx !
$end
#200
b0 c
b0 C
b0 L
b0 `
b0 b
b0 d
b0 E
b0 e
b0 f
b0 j
b0 /
b0 _
b0 g
b0 k
b0 n
b0 r
b0 v
b0 i
1D
1@
b1 7
b1 J
b1 N
b10000100 M
1%
#400
0%
#600
b1 h
b0 /
b0 _
b0 g
b0 k
b0 n
b0 r
b0 v
bz i
12
0D
1>
1B
0@
b10 7
b10 J
b10 N
b1000101000 M
1%
#800
0%
#1000
bz c
bz C
bz L
bz `
bz b
bz d
bz /
bz _
bz g
bz k
bz n
bz r
bz v
x2
0>
0B
b0 7
b0 J
b0 N
b0 M
1%
#1200
0%
#1400
b1 c
b0 C
b0 L
b0 `
b0 b
b1 d
b1 E
b1 e
b1 f
b1 j
b1 /
b1 _
b1 g
b1 k
b1 n
b1 r
b1 v
b1 i
1D
1@
b1 7
b1 J
b1 N
b10000100 M
1%
#1600
0%
#1800
b10 h
b1 /
b1 _
b1 g
b1 k
b1 n
b1 r
b1 v
bz i
12
0D
1>
1B
0@
b10 7
b10 J
b10 N
b1000101000 M
1%
#2000
bx c
bx d
b0xxxx /
b0xxxx _
b0xxxx g
b0xxxx k
b0xxxx n
b0xxxx r
b0xxxx v
bx a
x3
1$
x2
0(
0%
b1010 #
b1 )
b1 z
#2200
bz C
bz L
bz `
bz b
bzxxxx /
bzxxxx _
bzxxxx g
bzxxxx k
bzxxxx n
bzxxxx r
bzxxxx v
02
0>
0B
b0 7
b0 J
b0 N
b0 M
1%
#2400
0%
#2600
b0 C
b0 L
b0 `
b0 b
bx E
bx e
bx f
bx j
b0xxxx /
b0xxxx _
b0xxxx g
b0xxxx k
b0xxxx n
b0xxxx r
b0xxxx v
b10 i
1D
1@
b1 7
b1 J
b1 N
b10000100 M
1%
#2800
0%
#3000
bx C
bx L
bx `
bx b
b11 h
bx /
bx _
bx g
bx k
bx n
bx r
bx v
bz i
x2
0D
1>
1B
0@
b10 7
b10 J
b10 N
b1000101000 M
1%
#3200
0%
#3400
1%
#3600
0%
#3800
1%
#4000
bz a
03
0$
12
1(
0%
b10100 #
b10 )
b10 z
#4200
1%
#4400
0%
#4600
1%
#4800
0%
#5000
1%
#5200
0%
#5400
1%
#5600
0%
#5800
1%
#6000
bx a
x3
1$
x2
0(
0%
b11110 #
b11 )
b11 z
#6200
1%
#6400
0%
#6600
1%
#6800
0%
#7000
1%
#7200
0%
#7400
1%
#7600
0%
#7800
1%
#8000
bz a
03
0$
12
1(
0%
b101000 #
b100 )
b100 z
#8200
1%
#8400
0%
#8600
1%
#8800
0%
#9000
1%
#9200
0%
#9400
1%
#9600
0%
#9800
1%
#10000
bx a
x3
1$
x2
0(
0%
b110010 #
b101 )
b101 z
#10200
1%
#10400
0%
#10600
1%
#10800
0%
#11000
1%
#11200
0%
#11400
1%
#11600
0%
#11800
1%
#12000
bz a
03
0$
12
1(
0%
b111100 #
b110 )
b110 z
#12200
1%
#12400
0%
#12600
1%
#12800
0%
#13000
1%
#13200
0%
#13400
1%
#13600
0%
#13800
1%
#14000
bx a
x3
1$
x2
0(
0%
b1000110 #
b111 )
b111 z
#14200
1%
#14400
0%
#14600
1%
#14800
0%
#15000
1%
#15200
0%
#15400
1%
#15600
0%
#15800
1%
#16000
bz a
03
0$
12
1(
0%
b1010000 #
b1000 )
b1000 z
#16200
1%
#16400
0%
#16600
1%
#16800
0%
#17000
1%
#17200
0%
#17400
1%
#17600
0%
#17800
1%
#18000
bx a
x3
1$
x2
0(
0%
b1011010 #
b1001 )
b1001 z
#18200
1%
#18400
0%
#18600
1%
#18800
0%
#19000
1%
#19200
0%
#19400
1%
#19600
0%
#19800
1%
#20000
bz a
03
0$
12
1(
0%
b1100100 #
b1010 )
b1010 z
#20200
1%
#20400
0%
#20600
1%
#20800
0%
#21000
1%
#21200
0%
#21400
1%
#21600
0%
#21800
1%
#22000
bx a
x3
1$
x2
0(
0%
b1101110 #
b1011 )
b1011 z
#22200
1%
#22400
0%
#22600
1%
#22800
0%
#23000
1%
#23200
0%
#23400
1%
#23600
0%
#23800
1%
#24000
0%
b1100 z
