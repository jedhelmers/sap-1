$date
	Mon Mar 14 23:06:47 2022
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module cpu_tb $end
$var wire 8 ! bus [7:0] $end
$var wire 1 " instr_in $end
$var reg 8 # _bus [7:0] $end
$var reg 1 $ address_send $end
$var reg 1 % clk $end
$var reg 1 & debug $end
$var reg 4 ' flags [3:0] $end
$var reg 1 ( instr_load $end
$var reg 4 ) opcode [3:0] $end
$var reg 4 * pr_address [3:0] $end
$var reg 8 + pr_data [7:0] $end
$var reg 1 , pr_mode $end
$var reg 1 - rst $end
$var integer 32 . _cnt [31:0] $end
$scope module cpu_ $end
$var wire 1 $ address_send $end
$var wire 8 / bus [7:0] $end
$var wire 8 0 bus_out [7:0] $end
$var wire 1 % clk $end
$var wire 1 & debug $end
$var wire 4 1 flags [3:0] $end
$var wire 1 2 instr_in $end
$var wire 1 ( instr_load $end
$var wire 1 3 instr_out $end
$var wire 4 4 pr_address [3:0] $end
$var wire 8 5 pr_data [7:0] $end
$var wire 1 , pr_mode $end
$var wire 1 - rst $end
$var wire 8 6 unbuffered_out [7:0] $end
$var wire 4 7 step_out [3:0] $end
$var wire 1 8 reg_out_in $end
$var wire 4 9 reg_flags_in [3:0] $end
$var wire 1 : reg_b_out $end
$var wire 1 ; reg_b_in $end
$var wire 1 < reg_a_out $end
$var wire 1 = reg_a_in $end
$var wire 1 > ram_out $end
$var wire 1 ? ram_in $end
$var wire 4 @ ram_address [3:0] $end
$var wire 1 A pc_out $end
$var wire 1 B pc_jmp $end
$var wire 1 C pc_inc $end
$var wire 4 D opcode [3:0] $end
$var wire 1 E mar_in $end
$var wire 4 F mar_address [3:0] $end
$var wire 1 G halt $end
$var wire 1 H alu_sub $end
$var wire 1 I alu_out $end
$scope module c $end
$var wire 1 % clk $end
$var wire 1 & debug $end
$var wire 4 J flags [3:0] $end
$var wire 1 2 instr_in $end
$var wire 1 3 instr_out $end
$var wire 1 - rst $end
$var wire 4 K step_out [3:0] $end
$var wire 1 8 reg_out_in $end
$var wire 4 L reg_flags_in [3:0] $end
$var wire 1 : reg_b_out $end
$var wire 1 ; reg_b_in $end
$var wire 1 < reg_a_out $end
$var wire 1 = reg_a_in $end
$var wire 1 > ram_out $end
$var wire 1 ? ram_in $end
$var wire 1 A pc_out $end
$var wire 1 B pc_jmp $end
$var wire 1 C pc_inc $end
$var wire 4 M opcode [3:0] $end
$var wire 1 E mar_in $end
$var wire 1 G halt $end
$var wire 1 H alu_sub $end
$var wire 1 I alu_out $end
$var reg 18 N control_bits [17:0] $end
$var reg 4 O step [3:0] $end
$var integer 32 P ADD [31:0] $end
$var integer 32 Q CARRY [31:0] $end
$var integer 32 R HLT [31:0] $end
$var integer 32 S JC [31:0] $end
$var integer 32 T JMP [31:0] $end
$var integer 32 U JZ [31:0] $end
$var integer 32 V LDA [31:0] $end
$var integer 32 W LDB [31:0] $end
$var integer 32 X LDI [31:0] $end
$var integer 32 Y NOP [31:0] $end
$var integer 32 Z OUT [31:0] $end
$var integer 32 [ PARITY [31:0] $end
$var integer 32 \ SIGN [31:0] $end
$var integer 32 ] STA [31:0] $end
$var integer 32 ^ SUB [31:0] $end
$var integer 32 _ ZERO [31:0] $end
$upscope $end
$scope module ir $end
$var wire 8 ` bus_in [7:0] $end
$var wire 1 & debug $end
$var wire 1 2 instr_load_in $end
$var wire 1 3 instr_send_in $end
$var wire 4 a opcode [3:0] $end
$var wire 1 - rst $end
$var wire 4 b address_out [3:0] $end
$var reg 4 c high [3:0] $end
$var reg 4 d low [3:0] $end
$upscope $end
$scope module mar_ $end
$var wire 4 e address_in [3:0] $end
$var wire 4 f address_out [3:0] $end
$var wire 1 & debug $end
$var wire 1 E enable_in $end
$var wire 1 - rst $end
$var reg 4 g _address [3:0] $end
$upscope $end
$scope module mx24 $end
$var wire 4 h address_1 [3:0] $end
$var wire 4 i address_2 [3:0] $end
$var wire 1 , select $end
$var wire 4 j address_out [3:0] $end
$upscope $end
$scope module pc $end
$var wire 8 k cnt [7:0] $end
$var wire 1 & debug $end
$var wire 1 C inc $end
$var wire 1 A out_en $end
$var wire 1 - rst $end
$var reg 4 l _cnt [3:0] $end
$var reg 8 m _cnt_buffer [7:0] $end
$upscope $end
$scope module r $end
$var wire 4 n address [3:0] $end
$var wire 8 o bus [7:0] $end
$var wire 1 & debug $end
$var wire 8 p prg_data [7:0] $end
$var wire 1 , prg_mode $end
$var wire 1 > re_en $end
$var wire 1 ? wr_en $end
$scope begin $ivl_for_loop0 $end
$var integer 32 q i [31:0] $end
$upscope $end
$upscope $end
$scope module reg_a $end
$var wire 8 r bus [7:0] $end
$var wire 8 s bus_out [7:0] $end
$var wire 1 = data_load $end
$var wire 1 < data_send $end
$var wire 1 & debug $end
$var wire 1 - rst $end
$var wire 8 t unbuffered_out [7:0] $end
$var reg 8 u data [7:0] $end
$upscope $end
$scope module reg_b $end
$var wire 8 v bus [7:0] $end
$var wire 8 w bus_out [7:0] $end
$var wire 1 ; data_load $end
$var wire 1 : data_send $end
$var wire 1 & debug $end
$var wire 1 - rst $end
$var wire 8 x unbuffered_out [7:0] $end
$var reg 8 y data [7:0] $end
$upscope $end
$scope module reg_out $end
$var wire 8 z bus [7:0] $end
$var wire 8 { bus_out [7:0] $end
$var wire 1 8 data_load $end
$var wire 1 : data_send $end
$var wire 1 & debug $end
$var wire 1 - rst $end
$var wire 8 | unbuffered_out [7:0] $end
$var reg 8 } data [7:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 ~ i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 ~
bx }
bx |
bz {
bzxxxx z
bx y
bx x
bz w
bzxxxx v
bx u
bx t
bz s
bzxxxx r
b10000 q
bx p
bzxxxx o
bx n
bz m
b0 l
bzxxxx k
bx j
bx i
b0 h
b0 g
b0 f
bx e
bx d
bz c
bx b
bz a
bzxxxx `
b1 _
b100 ^
b101 ]
b10 \
b11 [
b1010 Z
b0 Y
b110 X
b10 W
b1 V
b1001 U
b111 T
b1000 S
b1011 R
b0 Q
b11 P
b0 O
b0 N
bz M
b0 L
b0 K
bz J
0I
0H
0G
b0 F
0E
bz D
0C
0B
0A
bx @
0?
0>
0=
0<
0;
0:
b0 9
08
b0 7
bx 6
bx 5
bx 4
x3
x2
bz 1
bz 0
bzxxxx /
b0 .
0-
x,
bx +
bx *
bx )
1(
b11 '
1&
0%
x$
bx #
z"
bx !
$end
#100
b0 )
#200
b0 D
b0 M
b0 a
b0 c
b0 d
b0 F
b0 f
b0 g
b0 h
b0 m
b0 e
1E
1A
b0 /
b0 `
b0 k
b0 o
b0 r
b0 v
b0 z
bz b
b1 7
b1 K
b1 O
b10000100 N
03
0$
1%
#300
b0 #
#400
0%
#600
bx d
bx D
bx M
bx a
bx c
bx e
b1 l
bx /
bx `
bx k
bx o
bx r
bx v
bx z
bz m
12
0E
1>
1C
0A
b10 7
b10 K
b10 O
b1000101000 N
1%
#800
0%
#1000
1%
#1200
0%
#1400
1%
#1600
0%
#1800
1%
#2000
0%
#2200
1%
#2300
x2
0(
b1 ~
#2400
b1 )
0%
#2500
bx b
x3
1$
#2600
b1010 #
1%
#2800
0%
#3000
1%
#3200
0%
#3400
1%
#3600
0%
#3800
1%
#4000
0%
#4200
1%
#4400
0%
#4600
12
1(
1%
b10 ~
#4700
b10 )
#4800
bz b
03
0$
0%
#4900
b10100 #
#5000
1%
#5200
0%
#5400
1%
#5600
0%
#5800
1%
#6000
0%
#6200
1%
#6400
0%
#6600
1%
#6800
0%
#6900
x2
0(
b11 ~
#7000
b11 )
1%
#7100
bx b
x3
1$
#7200
b11110 #
0%
#7400
1%
#7600
0%
#7800
1%
#8000
0%
#8200
1%
#8400
0%
#8600
1%
#8800
0%
#9000
1%
#9200
12
1(
0%
b100 ~
#9300
b100 )
#9400
bz b
03
0$
1%
#9500
b101000 #
#9600
0%
#9800
1%
#10000
0%
#10200
1%
#10400
0%
#10600
1%
#10800
0%
#11000
1%
#11200
0%
#11400
1%
#11500
x2
0(
b101 ~
#11600
b101 )
0%
#11700
bx b
x3
1$
#11800
b110010 #
1%
#12000
0%
#12200
1%
#12400
0%
#12600
1%
#12800
0%
#13000
1%
#13200
0%
#13400
1%
#13600
0%
#13800
12
1(
1%
b110 ~
#13900
b110 )
#14000
bz b
03
0$
0%
#14100
b111100 #
#14200
1%
#14400
0%
#14600
1%
#14800
0%
#15000
1%
#15200
0%
#15400
1%
#15600
0%
#15800
1%
#16000
0%
#16100
x2
0(
b111 ~
#16200
b111 )
1%
#16300
bx b
x3
1$
#16400
b1000110 #
0%
#16600
1%
#16800
0%
#17000
1%
#17200
0%
#17400
1%
#17600
0%
#17800
1%
#18000
0%
#18200
1%
#18400
12
1(
0%
b1000 ~
#18500
b1000 )
#18600
bz b
03
0$
1%
#18700
b1010000 #
#18800
0%
#19000
1%
#19200
0%
#19400
1%
#19600
0%
#19800
1%
#20000
0%
#20200
1%
#20400
0%
#20600
1%
#20700
x2
0(
b1001 ~
#20800
b1001 )
0%
#20900
bx b
x3
1$
#21000
b1011010 #
1%
#21200
0%
#21400
1%
#21600
0%
#21800
1%
#22000
0%
#22200
1%
#22400
0%
#22600
1%
#22800
0%
#23000
12
1(
1%
b1010 ~
#23100
b1010 )
#23200
bz b
03
0$
0%
#23300
b1100100 #
#23400
1%
#23600
0%
#23800
1%
#24000
0%
#24200
1%
#24400
0%
#24600
1%
#24800
0%
#25000
1%
#25200
0%
#25300
x2
0(
b1011 ~
#25400
b1011 )
1%
#25500
bx b
x3
1$
#25600
b1101110 #
0%
#25800
1%
#26000
0%
#26200
1%
#26400
0%
#26600
1%
#26800
0%
#27000
1%
#27200
0%
#27400
1%
#27600
0%
b1100 ~
